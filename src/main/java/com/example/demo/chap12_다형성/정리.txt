* 다형성
======================================================================================================
다형성(Polymorphism)은 그리스어에서 '많은'을 의미하는 'poly'와 '형태'를 의미하는 'morph'의 합성어로 '많은 형태를 가질 수 있는 능력'을 의미한다.
컴퓨터 과학에서는 다형성을 하나의 추상 인터페이스에 대해 코드를 작성하고 이 추상 인터페이스에 대해 서로 다른 구현을 연결할 수 있는 능력으로 정의한다.

객체 지향 프로그래밍에서 '유니버셜 다형성'과 '임시 다형성'으로 분류한다.

유니버셜 다형성에는 '매개변수 다형성'과 '포함 다형성'으로 분류한다.
임시 다형성에는 '오버로딩 다형성'과 '강제 다형성'으로 분류한다.

오버로딩 다형성은 하나의 클래스 안에 동일한  이름의 메서드가 존재하는 경우이다.
강제 다형성은 언어가 지원하는 타입 변환이나 사용자가 직접 구현한 타입 변환을 이용해 동일한 연산자를 다양한 타입에 사용할 수 있는 방식을 가리킨다.
이항 연산자 '+'에 피연산자가 하나는 '정수'이고 하나는 '문자열'일 때 연결 연산자로 동작한다. (예 : String str = "age : " + 7;)

매개변수 다형성은 제네릭 프로그래밍과 관련이 높은데 클래스의 인스턴스 변수나 메서더의 매개변수 타입을 임의의 타입으로 선언한 후 사용하는 시점에 구체적인
타입으로 지정하는 방식이다. (예 java.util.List -> public interface List<E> extends Collection<E> { ... })
포함 다형성은 메시지가 동일하더라도 수신한 객체의 타입에 따라 실제로 수행되는 행동이 달라지는 능력을 의미한다.
가장 널리 알려진 다형성이기 때문에 보통 다형성이라고 하면 포함 다형성이다. 포함 다형성은 '서브타입 다형성'이라고도 부른다.

상속의 진정한 목적은 코드의 재사용이 아닌 다형성을 위한 서브타입 계층을 구축하는 것이다.
======================================================================================================
상속은 부모 클래스의 모든 데이터와 행동을 자동으로 포함시켜 재사용 메커니즘으로 보일 수 있지만 상속의 목적은 코드 재사용이 아니다.
다형성을 가능하게하는 타입 계층을 만들기 위해서 이다. 재사용 목적으로 사용하면 이해하기 어렵고 유지보수하기 버거운 코드가 될 확률이 높다.

상속 메커니즘은 몇가지 개념을 이해해야한다. 아래 개념을 이해하면 상속의 내부 메커니즘뿐만 아니라 타입 계층을 기반으로 한 다형성 방식을 이해할 수 있다.

- 업캐스팅
부모 클래스 타입으로 선언된 변수에 자식 클래스의 인스턴스를 할당하는 것이 가능하다.
업캐스팅은 대입문, 파마리터 타입 두 가지 방식이 있다. 모든 객체지향언어는 명시적으로 타입 변환하지 않고도 부모 타입 참조 변수의 자식 타입 인스턴스를 대입할 수 있다.
반대로 다운 캐스팅도 할 수 있다.

- 동적 메서드 탐색
객체지향 시스템은 다음 규칙에 따라 실행할 메서드를 선택한다.
1. 메시지를 수신한 객체는 먼저 자신을 생성한 클래스에 적합한 메서드가 존재하는지 검사한다. 존재하면 메서드를 실행하고 탐색을 종료한다.
2. 메서드를 찾지 못했다면 부모 클래스에서 메서드를 탐색을 계속한다. 이 과정은 적합한 메서드를 찾을 때까지 상속 계층을 따라 올라가며 계속한다.
3. 상속 계층의 가장 최상위 클래스에 이르렀지만 메서드를 발견하지 못한 경우 예외를 발생시키며 탐색을 중단한다.

탐색가 관련해 중요한 self라는 변수를 이해해야한다.

동적 메서드 탐색은 두 가지 원리로 구성된다.
1. 자동적인 메시지 위임 : 클래스는 자신이 이해할 수 없는 메시지는 부모 클래스에게 처리를 위임한다.
2. 메서드를 탐색하기 위해 동적인 문맥을 사용한다.

- 동적 바인딩
선언된 변수의 타입이 아니라 메시지를 수신하는 객체의 타입에 따라 실행되는 메서드가 결정된다. 
이것은 객체지향 시스템이 메시지를 처리할 적절한 메서드를 컴파일 시점이 아닌 실행시 점에 결정하기 떄문이다.

- self 참조
객체가 메시지를 수신하면 컴파일러는 self 참조라는 임시 변수를 자동으로 생성한 후 메시지를 수신한 객체를 가리키도록 설정한다. 
동적 메서드 탐색은 self가 가리키는 객체의 클래스에서 시작해서 상속 계층의 역방향으로 이뤄지며 메서드 탐색이 종료되는 순간 self 참조는 자동으로 소멸된다.

정적 언어에 속하는 c++, c#, Java에서는 self 참조를 this라고 부른다. 
동적 타입 언어에 속하는 스몰토크, 루비에서는 self 참조를 self 키워드를 사용한다. 파이썬은 self 참조의 이름을 임의로 정할 수 있다.

- super 참조
메서드 탐색을 부모 클래스에서 부터 시작한다. super는 부모 클래스에서 부터 탐색을 시작해서 정적이고 컴파일시점에 미리 결정된다.
======================================================================================================
상속 계층 안의 클래스는 메시지를 처리할 방법을 알지 못할 경우 메시지에 대한 처리를 부모 클래스에게 위임하는 것을 자동적인 메시지 위임이라 부른다.
======================================================================================================
동적인 문맥은 메시지를 수신한 객체가 무엇이냐에 따라 메서드 탐색이 바뀌는 것이다.

메시지를 수신하는 self 참조가 가리키는 객체의 타입을 변경함으로써 객체가 실행될 문맥을 동적으로 바꿀 수 있다.
(참조가 A의 인스턴스를 가리키고 있다면 메서드 탐색은 A 클래스에서 시작되어 Object 클래스에서 종료되고
참조가 B의 인스턴스를 기리키고 있다면 메서드 탐색은 B 클래스에서 시작되어 Object 클래스에서 죵료된다.)
======================================================================================================
이해할 수 없는 메시지는 메시지를 처리하는 방법은 프로그래밍 언어가 정적 타입 언어와 동적 타입 언어에 속하는지에 따라 달라진다.

정적 타입 언어 : 상속 계층 전체를 탐색 후에 없다면 컴파일 에러를 발생한다.
동적 타입 언어 : 이해할 수 없다는 메시지를 전송하고 최상위 클래스에서 에러를 발생시킨다.
======================================================================================================
self vs super
self 전송에서 메시지 탐색을 시작하는 클래스는 '미정'이지만 super 전송에는 '미리' 정해진다.
self 전송은 메서드 탐색을 시작할 클래스를 반드시 '실행 시점(런타임)'에 동적으로 결정해야하고 super 전송의 경우네는 '컴파일 시점'에 이미 결정해야한다.
======================================================================================================
동적 메서드 탐색의 메커니즘은 다른 객체에게 동일하게 전달해서 처리를 요청하는 '위임'을 하는 것이다.

위임은 자신이 수신한 메시지를 다른 객체에게 동일하게 전달해서 처리를 요청하는 것이다. 위임은 항상 현재의 실행 문맥을 가리키는 self 참조를 인자로 전달한다.

위임과 비슷한 개념으로 포워딩이 있다. 포워딩은 인자로 self를 전달하지 않는다.
======================================================================================================


