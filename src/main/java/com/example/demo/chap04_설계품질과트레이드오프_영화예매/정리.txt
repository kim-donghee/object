객체지향설계의 핵심은 역할, 책임, 협력이다. 
협력은 객체들간의 메시지를 주고받는 상호작용이다. 
책임은 객체들간의 협력하기 위해 수행하는 해동이다.
역할은 대체 가능한 책임의 집합이다.

객체지향 설계에서 제일 중요한 것은 책임이다. 
책임이 잘못되면 원할한 협력을 할 수 없게되고 역할이 책임의 집합이기 때문에 역할과 협력이 조화를 이루지 못한다.
객체들간의 올바른 책임 할당은 낮은 결합도와 높은 응집도를 가진 구조가 된다.
--------------------------------------------------------------------------------------------
데이터 중심 설계와 책임 중심 설계 두 개의 장단점을 비교를 캡슐화와 응집도, 결합도를 사용한다.

캡슐화는 객체지향에서 제일 중요한 원리이며 외부에서 알 필요 없는 내부의 세부 구현사항을 감추고 상대적으로 
안정적인 인터페이스로 공개함으로써 변경의 여파를 줄이는 것이고 응집도와 결합도에 영향을 미친다.
응집도는 모듈에 포함된 내부 요소들이 연관돼 있는 정도를 나타낸다. 모듈 내의 요소들이 하나의 목적을 위해 긴밀하게 협력한다면 높은 응집도를 가진다.
결합도는 의존성의 정도를 나타내며 모듈간에 필요한 지식만 알고 있다면 낮은 결합도를 가지고 너무 자세히 알면 높은 결합도를 가지게된다.
애플리케이션은 각 요소의 응집도가 높고 서로 느슨한 결합일때 좋은 설계라고 말한다. 좋은 설계란 변경에 자유로운 것이다.

데이터 중심 설계는 캡슐화를 위반하고 내부 구현을 인터페이스의 일부로 만든다.
책임 중심 설계는 설객체의 내부 구현을 안정적인 인터페이스 뒤로 캡슐화한다.
캡슐화 정도가 객체의 응집도와 결합도를 결정하게되어 데이터 중심 설계는 낮은 응집도와 높은 결합도가 될 가능성이 높다.

* 로버트 마틴은 모듈의 응집도가 변경과 연관이 있다는 사실을 강조하기 위해 단일 책임 원칙이라는 설계 원칙을 제시했다.
단일 책임 원칙은 클래스는 단 한가지의 변경 이유만 가져야한다는 것이다. 단일 책임 원칙에 '책임'은 변경의 이유라는 의미로 사용된다는 점에 주의해야한다.

캡슐화를 어기게되면 두 가지 문제가 발생한다.
1. 코드의 중복이 발생한다.
2. 변경에 취약하다.
해결 방법은 접근자, 수정자 보다는 내부에서 수정하는 로직을 캡슐화하는 것이다.



--------------------------------------------------------------------------------------------



