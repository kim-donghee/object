* 일관성 있는 협력
======================================================================================================
유사한 요구사항을 계속 추가해야 하는 상황에서 각 협력이 서로 다른 패턴을 따를 경우에는 전체적인 설계의 일관성이 서서히 무너지게된다.
일관성이 없는 설계는 코드의 재사용이 어렵고 코드를 이해하기 어려워진다. 일관성 있는 협력 패턴을 적용해서  코드를 이해하기 쉽고 직관적이며 유연해지도록 해야한다.

일관성있는 설계를 만드느는데 필요한 것은 풍부한 설계 경험과 디자인 패턴 학습이다.

일관성있는 설계의 지침으로 두 가지가 있다.
1. 변하는 개념을 변하지 않는 개념으로부터 분리한다.
객체들간의 일관성있게 협력하기 위해 타입 계층을 구성하고 개별적인 객체로 분리한다.
타입 계층을 클라이언트로 분리하기 위해 역할을 도입하면 역할을 추상 클래스와 인터페이스로 만들 수 있다.
변하는 개념을 별도의 서브 타입으로 분리함으로써 클라이언트로부터 서브 타입을 캡슐화한다.

2. 변하는 개념을 캡슐화한다.
추상화에 의존하도록 만들어서 결합도를 낮추고 대체 가능한 역할로 구성된 협력을 설계할 수 있게한다.

인터페이스 설계 원칙으로 효과적으로 캡슐화하는 코드를 구현할 수 있고 의존성 관리 기법으로 낮은 결합도를 유지할 수 있다.

캡슐화는 많은 사람들이 데이터 은닉을 떠올린다. 하지만 GOF의 조언에 따르면 캡슐화는 단순히 데이터 은닉이 아닌 소프트웨어 안에서 변할 수 있는 모든 '개념'을 감추는 것이다.

여기서 '개념'이란 변하는 어떤 것들이다. 정리하면 캡슐화는 변하는 어떤 것들이든 감추는 것이다.

캡슐화의 제일 대표적인것은 객체의 퍼블릭 인터페이스와 구현을 분리하는 것이다. 자주 변경되는 내부 구현을 안정적인 퍼블릭 인터페이스 뒤로 숨기는 것이다.

캡슐화는 4가지 종류가있다.
데이터 캡슐화 : 클래스 내부 인스턴스를 외부에서 접근하지 못하고 내부에서 데이터를 관리한다.
메서드 캡슐화 : 클래스 내부의 특정 메서드를 외부에서 접근하지 못하게한다.
객체 캡슐화 : 클래스 내부의 A 타입의 인스턴스를 외부에서 접근하지 못하게한다. 객체와 객체사이 관계를 캡슐화한것으로 합성이다.
서브타입 캡슐화 : 추상 타입을 의존하고 서브 타입의 종류를 캡슐화한다. 서브타입 캡술화는 다형성의 기반이다.

객체 캡슐화와 서브타입 캡슐화의 적용하는 방법은 다음과 같다.
1. 변하는 부분을 분리해서 타입 계층을 만든다.

2. 변하지 않는 부분의 일부로 타입 계층을 합성한다.
======================================================================================================
협력을 일관성 있게 만들기 위해서는 변경을 캡슐화해서 파급효과를 줄여야한다.
변경을 캡슐화하는 가장 좋은 방법은 변하지 않은 부분으로부터 변하는 부분을 분리하는 것이다. 변하는 부분을 추상화하는 것을 잊어서는 안된다.

변하지 않는 부분을 규칙과 변하는 부분을 적용 조건 이라고 할 떄 '적용 조건'을 추상화해서 상세 조건을 이 추상화의 서브타입으로 만든다. 이것이 서브타입 캡슐화다.
그 후에 '규칙'이 적용 조건을 표현하는 추상화를 합성 관계로 연결한다.이것이 객체 캡슐화다. 
======================================================================================================
일관성을 유지하는 것처럼 보이던 협력 패턴이 시간이 흐르면서 새로운 요구사항이 추가되는 과정에서 일관성의 조금 흐트러진다.

요구사항이 변경되면 협력 역시 지속적으로 개선해줘야한다.
======================================================================================================








