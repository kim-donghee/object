* 합성
======================================================================================================
클래스의 상속과 객체의 합성은 객체지향 프로그래밍에서 재사용할 수 있는 가장 대표적인 기법이다. 상속 관계(is-a), 합성 관계(has-a)

상속은 부모 클래스의 내부 구현에 대해 상세하게 알아야하기 때문에 부모 클래스와 자식 클래스간에 결합도가 높다.
상속 관계는 클래스 사이의  정적 관계로 컴파일타임에 의존성이 결정되어 유연하지 못하게된다.

합성은 내부에 포함되는 객체가 구현이 아닌 퍼블릭 인터페이스에 의존한다. 포함된 객체 내부 구현이 변경되어도 영향을 최소화할 수 있기 때문에 더 안정적이다.
합성 관계는 객체 사이의 동적 관계로 런타임에 의존성이 결정되어 유연하게 사용할 수 있다. 

상속은 합성에 비해 구현 관점에서 덜 복잡 하지만 안정성, 유연성에서 문제점을 가지고있다. 합성을 사용하면 모두 해결할 수 있다.
======================================================================================================
상속은 안정성면에서 3가지 문제점을 가지고 있다.

- 불필요한 인터페이스 상속 문제 -
합성은 불필요한 퍼블릭 인터페이스를 포함시키지 않는다.

- 메서드 오버라이딩의 오작용 문제 -
기존 클래스의 인터페이스를 그대로 외부에 제공하면서 구현에 대한 결합 없이 일부 작동 방식을 변경하고 싶은 경우네는 포워딩을 사용하면 된다.

- 부모 클래스와 자식 클래스의 동시 수정 문제 -
======================================================================================================
상속은 유연성면에서 2가지 문제를 가지고 있다.
1. 하나의 기능을 추가하거나 수정하기 위해 불필요하게 많은 수의 클래스를 추가하거나 수정해야 한다.
상속의 남용으로 수 많은 클래스가 추가될 수 있다. 이를 조합의 폭발, 클래스의 폭발이라고한다.
클래스 폭발은 부모 클래스와, 자식 클래스 사이에 강한 결합으로 발생한다.

2. 단일 상속만 지원하는 언어에서는 상속으로 인해 오히려 중복 코드의 양이 늘어날 수 있다.
======================================================================================================


