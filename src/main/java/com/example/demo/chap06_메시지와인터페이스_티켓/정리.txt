메시지는 객체들이 협력하기 위해 사용할 수 있는 유일한 소통이다.
메시지 전송자는 클라이언트 메시지 수신자는 서버라고 부른다.
메시지는 오퍼레이션명과 인자로 구성된다.

객체가 의사소통을 위해 외부에 공개하는 메시지의 집합을 퍼블릭 인터페이스라고 부른다.
오퍼레이션은 퍼블릭 인터페이스에 포함된 메시지이다.
메서드는 메시지를 수신했을 때 실제로 실행되는 함수 또는 프로시저이다.

오퍼레이션이름과 파라미터 목록을 합쳐 시그니처라고 부른다.
=====================================================================
좋은 인터페이스는 최소한의 인터페이스와 추상적인 인터페이스 조건을 만족해야한다.
최소한의 인퍼테이스는 인터페이스에 꼭 필요한 오퍼레이션만을 가지것이다.
추상적인 인퍼테이스는 어떻게 수행하는지가 아니라 무엇을 수행하는지를 표현하것이다.
=====================================================================
퍼블릭 인터페이스의 품질에 영향을 미치는 법칙으로 디미터 법칙, 묻지 말고 시켜라, 의도를 드러내는 인터페이스, 명령-쿼리 분리 등이 있다.

디미터 법칙은 객체의 내부 구조에 대한 결합으로 인해 발생하는 설계 문제를 해결하기 위해 제안된 원칙으로 
객체 내부 구조에 강하게 결합되지 않도록 협력 경로를 제한하는 것이다. (오직 하나의 도트만 사용하라.)
클래스 내부의 메서드에 
this 객체, 메서드의 매개변수, this 속성, this의 속성인 컬렉션 요소, 메서드 내에서 생성된 지역 객체
만 메시지를 전송하도록 프로그래밍하는 것이다.
디미터 법칙은 내부 구조가 전송자에게 노출되지 않으며, 메시지 전송자는 수진자의 내부 구현에 결합되지 않아서 클라이언트와 서버 사이의 결합도가 낮다.
무비판적으로 디미터 원칙을 수용한다면 퍼블릭 인터페이스 관점에서 객체의 응집도가 낮아질 수도 있다.

묻지 말고 시켜라(Tell, Don't Ask)는 디미터 법칙의 스타일의 메시지 작성을 장려하는 원칙을 가리키는 용어이다.

의도를 드러내는 인터페이스
메서드의 이름을 어떻게가 아니라 무엇을 하는지를 드러내느 것이다.
객체가 협력 안에서 수행할 수 있도록 의도에 부합한 메서드의 이름을 지어야한다.

디미터 법칙과 묻지 말고 시켜라 스타일은 객체의 퍼블릴 인터페이스를 더욱 깔끔하고 유연하게 만들어 주는 설계 원칙이다.
하지만 절대적인 법칙은 아니다. 법칙은 예외가 없지만 원칙은 예외가 넘쳐난다. 그래서 적절하게 트레이드오프를 할수 있어야한다.

가끔씩은 필요에 따라 물어야 한다는 사실에 납득을 했다면 명령-쿼리 분리 원칙을 알아두면 도움이 될 것이다.
명령-쿼리 원칙은 퍼블릭 인터페이스에 오퍼레이션을 정의할 때 참고할 수 있는 지침을 제공한다. 이해를 하기 위해 몇가지 용어를 알아야한다.
루틴는 어떤 절차를 묶어 호출 가능하도록 이름을 부여한 기능 모듈, 루틴은 프로시저와 함수로 구분한다.
프로시저는 정채진 절차에 따라 내부의 상태를 변경하는 루틴이다.
함수는 어떤 절차에 따라 필요한 값을 계산해서 반환하는 루틴이다.

명령과 쿼리는 객체의 인터페이스 측면에서 프로시저와 함수를 부르는 이름이다.
명령은 상태를 수정하는 오퍼레이션이다. (반환값을 가질 수 없다.)
쿼리는 객체와 관련된 정보를 반환하는 오퍼레이션이다. (객체의 상태를 변경할 수 없다.)






