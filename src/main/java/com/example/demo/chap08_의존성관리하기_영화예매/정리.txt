잘 설계된 객체지향 애플리케이션은 작고 응집도 높은 객체들로 구성된다. 작고 응집도 높은 객체들은 한 가지 일만한다.
이런 작은 객체들은 단독으로 수행할 수 있는 작업이 없기때문에 필수적으로 협력을한다.
하지만 객체 사이에 과도한 협력은 객체 사이의 의존성을 낳게되고 과도한 의존성은 애플리케이션 수정을 어렵게 만든다.
객체지향 설계는 의존성을 관리하는 것이고 객체가 변화를 받아들일 수 있게 의존성을 정리하는 기술이다.

의존성이란 객체가 협력하기 위해 다른 객체를 필요로 할 때 두 객체 사이에 의존성이 존재하게된다. 의존성은 실행시점과 구현시점에 서로 다른 의미를 가진다.
실행시점 : 의존하는 객체가 정상적으로 동작하기 위해서 실행 시에 의존 대상 객체가 반드시 존재해야한다.
구현시점 : 의존 대상 객체가 변경될 경우 의존하는 객체도 함께 변경된다.

의존성 전이는 A객체와 B객체가 의존할 경우 A객체가 의존하는 대상 대해서도 B가 의존하는 것이다.
의존성은 함께 변경될 수 있는 가능성을 의미한다. 하지만 모든 경우에 의존성이 전이되는 것은 아니고 변경의 방향과 캡슐화에 따라 달라진다.
A객체가 의존하고 있는 어떤 요소의 구현이나 인터페이스가 변경되는 경우에 A객체가 내부 구현을 효과적으로 캡슐화가 되어있다면 B객체까지 변경이 전파되지 않을 것이다.

의존성은 런타임시점과 컴파일시점에 따라 구분할 수 있다.
런타임 의존성은 애플리케이션 실행되는 시점이고 객체 사이의 의존성이다.
컴파일 의존성은 컴파일 시점보다 코드 그 자체를 가리키고 클래스 사이의 의존성이다.
컴파일타임 구조와 런타임 구조 사이의 거리가 멀면 먹수록 설계가 유연해지고 재사용이 가능해진다.

클래스가 사용될 특정한 문맥에 대해 최소한의 가정만 이뤄져 있다면 다른 문맥에서 재사용하기가 더 수월해진다. 이를 컨텍스트 독립성이라고 부른다.
구체적으로 클래스를 알면 알수록 특정한 문맥에 강하게 결합된다. 컨텍스트에 정보가 많을 수록 재사용성이 떨어진다.

컨텍스트에 독립적인 의존성은 바람직한 의존성을 가지고 컨텍스트에 강하게 결합된 의존성은 바람직하지 않은 의존성이고 바람직한 의존성은 재사용성이 좋다.
그리고 두 요소 사이의 바람직한 의존성을 느슨한 결합도, 약한 결합도라고 하고 바람직하지 못할 때는 단단한 결합도, 강한 결합도를 가진다고한다.

결합도의 정도는 정보의 양으로 결정된다. 정보의 양의 많을 수록 강하게 결합되어 재사용성이 떨어진다.
느슨한 결합도를 유지하려면 협력하는 대상의 대해 더 적게 알아야한다. 효과적인 방법은 협력하는 대상을 추상화해서 최대한 감춰야한다.

의존하는 대상이 더 추상적일수록 결합도는 낮아진다. 구체 클래스에 비해 추상 클래스는 메서드 내부의 구현과 자식 클래스의 종류에 
대한 지식을 클라이언트에케 감출 수 있다. 정보의 양이 더 적기 때문에 추상 클래스가 결합도가 더 낮다.
하지만 여전히 협력하는 대상이 속한 클래스 상속 계층이 무엇인지에 대해서 알고 있어야 한다. 인터페이스는 상속 계층을 모르더라도 협력이 가능하다.
인터페이스의 의존성은 협력하는 객체가 어떤 메시지를 수신할 수 있는지에 대한 지식만을 남기기 때문에 추상 클래스 의존성보다 결합도가 낮다.

퍼블릭 인터페이스에 노출되는 명시적인 의존성 또는 노출되지 않는 숨겨진 의존성으로 구분할 수 있다.
명시적인 의존성은 생성자, setter 또는 메서드 인자로 의존성을 해결하는 방법이다.
숨겨진 의존성은 인스턴스를 직접 생성하는 방식으로 의존성을 파악하기 위해 내부 구현을 직접 살펴바야 알수있게된다.
더 큰 문제는 다른 컨텍스트에서 사용하기 위해 내부 구현을 변경해야 한다. 유연하지 못하고 재사용할 수 가 없다.
의존성을 내부 구현에 숨기지말고 명시적으로 표현해서 유연하고 재사용가능한 설계를 만들자.





