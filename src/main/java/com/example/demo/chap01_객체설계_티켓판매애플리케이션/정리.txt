* 캡슐화, 의존성, 자율적인 존재(객체), 결합도, 응집도
======================================================================================================
로버튼 마틴<클린 소프트웨어: 애자일 원칙과 패턴, 그리고 실천 방법>
모든 모듈은 제대로 실행되고, 변경에 용이하고, 이해하기 쉬워야한다. 이해하기 쉬운 코드는 읽는 사람이 의사소통이 되야한다.
======================================================================================================
객체 사이의 의존성이 과한 경우 결합도가 높아 변경하기 어려워지고 의존성이 과한 경우 수동적인 객체가 존재할 수 있다.
수동적인 객체는 캡슐화를 통해서 높은 응집도와 낮은 결합도를 가지고 협력하는 자율적인 객체로 만들어줘야한다. 이 객체는 최소한의 의존성만 가지게된다.

캡슐화란 개념적, 물리적으로 객체 내부의 새부적인 사항을 감추는 것이다. 캡슐화의 목적은 변경하기 쉬운 객체를 만드는 것이다.

객체지향세계에서는 모든 것이 능동적이고 자율적인 존재이다. 레베카 워프스브록은 이를 '의인화'라고한다.
======================================================================================================
객체는 연관된 작업만을 수행하고 연관성없는 작업은 다른 객체에게 위임하는 객체를 가리켜 응집도가 높다고 말한다.
객체간의 위임은 객체 내부 상태를 캡술화하고 객체 간에 오직 메시지를 통해서만 상호작용하도록 만들어야한다.
======================================================================================================
절차지향과 객체지향
프로세스와 데이터가 다른 위치에 존재한다면 절차적 프로그래밍이라고 부른다.
절차적 프로그래밍은 모든 처리가 하나의 클래스 안에 위치하고 나머지 클래스는 단지 데이터 역할만 수행한다.
모든 처리가 이루어지는 클래스 제외한 데이터 역할만을 하는 객체들은 수동적인 존재이며 변경에 취약하다.

프로세스와 데이터를 동일한 모듈안에 위치시키는 것을 객체지향 프로그래밍이라고 부른다.
훌륭한 객체지향 설계의 핵심은 캡슐화를 이용해서 의존성을 적절히 관리함으로써 객체 사이의 결합도를 낮추는 것이다.
객체지향 프로그래밍은 이해하기 쉽고, 객체 내부의 변경이 객체 외부에 파급되지 않도록 제어할 수 있다.
======================================================================================================


